ggplot(m_data, aes(x=writing_foreign)) + theme_bw() + geom_bar()
ggplot(m_data, aes(x=writing_native)) + theme_bw() + geom_bar()
ggplot(m_data, aes(x=writing_foreign), fill=writing_native) + theme_bw() + geom_bar()
ggplot(m_data, aes(x=writing_foreign), fill=age) + theme_bw() + geom_bar()
ggplot(m_data, aes(x=writing_native)) + theme_bw() + geom_bar()
language_summary
language_summary <- (colMeans( m_data[ , c("writing_foreign", "speaking_foreign", "listening_foreign", "writing_native", "listening_native","speaking_native")],na.rm = TRUE)) %>% as.data.frame()
language_summary
language_summary <- (colMeans( m_data[ , value = c("writing_foreign", "speaking_foreign", "listening_foreign", "writing_native", "listening_native","speaking_native")],na.rm = TRUE)) %>% as.data.frame()
language_summary
language_summary <- (value=colMeans( m_data[ , c("writing_foreign", "speaking_foreign", "listening_foreign", "writing_native", "listening_native","speaking_native")],na.rm = TRUE)) %>% as.data.frame()
language_summary
language_summary <- (colMeans( m_data[ , c("writing_foreign", "speaking_foreign", "listening_foreign", "writing_native", "listening_native","speaking_native")],na.rm = TRUE)) %>% as.data.frame(col.names = value)
language_summary
language_summary <- (colMeans( m_data[ , c("writing_foreign", "speaking_foreign", "listening_foreign", "writing_native", "listening_native","speaking_native")],na.rm = TRUE)) %>% as.data.frame(col.names = "value")
language_summary
language_summary <- (colMeans( m_data[ , c("writing_foreign", "speaking_foreign", "listening_foreign", "writing_native", "listening_native","speaking_native")],na.rm = TRUE)) %>% as.data.frame( col.names = c("value"))
language_summary
language_summary <- (colMeans( m_data[ , c("writing_foreign", "speaking_foreign", "listening_foreign", "writing_native", "listening_native","speaking_native")],na.rm = TRUE)) %>% as.data.frame( col.names = c("a","value"))
language_summary
language_summary <- (colMeans( m_data[ , c("writing_foreign", "speaking_foreign", "listening_foreign", "writing_native", "listening_native","speaking_native")],na.rm = TRUE)) %>% as.data.frame( col.names = names("a"))
language_summary
language_summary <- (colMeans( m_data[ , c("writing_foreign", "speaking_foreign", "listening_foreign", "writing_native", "listening_native","speaking_native")],na.rm = TRUE)) %>% as.data.frame(responsename="a")
language_summary
language_summary <- (colMeans( m_data[ , c("writing_foreign", "speaking_foreign", "listening_foreign", "writing_native", "listening_native","speaking_native")],na.rm = TRUE)) %>% as.data.frame(responseName="a")
language_summary
language_summary <- (colMeans( m_data[ , c("writing_foreign", "speaking_foreign", "listening_foreign", "writing_native", "listening_native","speaking_native")],na.rm = TRUE)) %>% colnames(c("rating"))
language_summary
colnames(language_summary) <- c("rating")
language_summary
ggplot(m_data, aes(x=language_summary)) + theme_bw() + geom_bar()
language_summary
language_summary
ggplot(m_data, aes(x=language_summary)) + theme_bw() + geom_bar()
language_summary <- (colMeans( m_data[ , c("writing_foreign", "speaking_foreign", "listening_foreign", "writing_native", "listening_native","speaking_native")],na.rm = TRUE))
colnames(language_summary) <- c("rating")
language_summary
language_summary <- (colMeans( m_data[ , c("writing_foreign", "speaking_foreign", "listening_foreign", "writing_native", "listening_native","speaking_native")],na.rm = TRUE)) %>% as.data.frame()
colnames(language_summary) <- c("rating")
language_summary
ggplot(m_data, aes(x=language_summary)) + theme_bw() + geom_bar()
language_summary <- (colMeans( m_data[ , c("writing_foreign", "speaking_foreign", "listening_foreign", "writing_native", "listening_native","speaking_native")],na.rm = TRUE)) %>% as.tibble()
colnames(language_summary) <- c("rating")
language_summary
ggplot(m_data, aes(x=language_summary)) + theme_bw() + geom_bar()
ggplot(m_data, aes(x=language_summary)) + theme_bw() + geom_bar()
language_summary <- (colMeans( m_data[ , c("writing_foreign", "speaking_foreign", "listening_foreign", "writing_native", "listening_native","speaking_native")],na.rm = TRUE)) %>% as.tibble()
colnames(language_summary) <- c("rating")
language_summary
language_summary <- (colMeans( m_data[ , c("writing_foreign", "speaking_foreign", "listening_foreign", "writing_native", "listening_native","speaking_native")],na.rm = TRUE)) %>% as.data.frame.numeric()
colnames(language_summary) <- c("rating")
language_summary
ggplot(m_data, aes(x=language_summary)) + theme_bw() + geom_bar()
ggplot(m_data, aes(x=language_summary)) + theme_bw() + geom_dotplot()
ggplot(m_data, aes(x=language_summary)) + theme_bw() + geom_bar()
language_summary
ggplot(language_summary, aes(x=rating)) + theme_bw() + geom_bar()
language_summary
ggplot(language_summary) + theme_bw() + geom_bar()
colnames(language_summary) <- c("a","rating")
m_data
ggplot(df, aes(x=1:7)) + stat_summary(fun.y="mean", geom="bar")
ggplot(m_data, aes(x=1:7)) + stat_summary(fun.y="mean", geom="bar")
language_summary
language_summary <- (colMeans( m_data[ , c("writing_foreign", "speaking_foreign", "listening_foreign", "writing_native", "listening_native","speaking_native")],na.rm = TRUE)) %>% as.matrix()
m_data
language_summary
colnames(language_summary) <- c("rating")
language_summary
test <- melt(language_summary)
test <- melt_table(language_summary)
language_summary
colnames(language_summary) <- c("rating")
language_summary
m_data
library(reshape)
library(reshape2)
tmp <- melt(m_data, id=c("subject_id"))
tmp
tmp <- melt(m_data, id=c("writing_native"))
tmp
tmp <- melt(m_data, id.vars = =c("writing_native"))
tmp
tmp <- melt(m_data, id.vars = c("writing_native"))
tmp
tmp <- melt(m_data, id.vars = c("writing_native"),na.rm=TRUE)
tmp
language_summary
language_summary <- melt(language_summary, id = "rating")
language_summary
ggplot(language_summary, aes(x=Var1, y=value)) + theme_bw() + geom_bar()
ggplot(language_summary, aes(x=Var1)) + theme_bw() + geom_bar()
language_summary
ggplot(language_summary, aes(x=value)) + theme_bw() + geom_bar()
ggplot(language_summary, aes(y=value)) + theme_bw() + geom_bar()
colnames(language_summary) <- c("rating")
language_summary
colnames(language_summary) <- c("rating")
language_summary
language_summary <- (colMeans( m_data[ , c("writing_foreign", "speaking_foreign", "listening_foreign", "writing_native", "listening_native","speaking_native")],na.rm = TRUE)) %>% as.matrix()
colnames(language_summary) <- c("rating")
tmp <-
language_summary
tmp <-
language_summary
language_summary
names(language_summary) = c("a")
language_summary
language_summary <- (colMeans( m_data[ , c("writing_foreign", "speaking_foreign", "listening_foreign", "writing_native", "listening_native","speaking_native")],na.rm = TRUE)) %>% as.matrix()
colnames(language_summary) <- c("rating")
language_summary
a<- melt(language_summary)
a
a
names(a) = c("language skill", "a", "value")
a
ggplot(a, aes(x=language_skill , y=a, fill=value)) +
geom_bar(stat="identity", position="dodge", colour="black") +
scale_fill_brewer(type="qual", palette=1)
names(a) = c("language_skill", "a", "value")
ggplot(a, aes(x=language_skill , y=a, fill=value)) +
geom_bar(stat="identity", position="dodge", colour="black") +
scale_fill_brewer(type="qual", palette=1)
ggplot(a, aes(x=language_skill , y=a, fill=factor(value))) +
geom_bar(stat="identity", position="dodge", colour="black") +
scale_fill_brewer(type="qual", palette=1)
ggplot(a, aes(x=language_skill , fill=factor(value))) +
geom_bar(stat="identity", position="dodge", colour="black") +
scale_fill_brewer(type="qual", palette=1)
ggplot(a, aes(x=language_skill,y=(1:7) fill=factor(value))) +
ggplot(a, aes(x=language_skill,y=(1:7), fill=factor(value))) +
geom_bar(stat="identity", position="dodge", colour="black") +
scale_fill_brewer(type="qual", palette=1)
ggplot(a, aes(x=language_skill,y=value, fill=factor(value))) +
geom_bar(stat="identity", position="dodge", colour="black") +
scale_fill_brewer(type="qual", palette=1)
ggplot(a, aes(x=language_skill,y=value, fill=language_skill)) +
geom_bar(stat="identity", position="dodge", colour="black") +
scale_fill_brewer(type="qual", palette=1)
ggplot(a, aes(x=a,y=value, fill=language_skill)) +
geom_bar(stat="identity", position="dodge", colour="black") +
scale_fill_brewer(type="qual", palette=1)
ggplot(a, aes(x=value,y=value, fill=language_skill)) +
geom_bar(stat="identity", position="dodge", colour="black") +
scale_fill_brewer(type="qual", palette=1)
ggplot(a, aes(x=language_skill,y=value, fill=language_skill)) +
geom_bar(stat="identity", position="dodge", colour="black") +
scale_fill_brewer(type="qual", palette=1)
ggplot(a, aes(x=language_skill,y=value, fill=language_skill)) +
geom_bar(stat="identity", position="dodge", colour="black") +
scale_fill_brewer(type="qual", palette=2)
ggplot(a, aes(x=language_skill,y=value, fill=language_skill)) +
geom_bar(stat="identity", position="dodge", colour="black") +
scale_fill_brewer(type="qual", palette=4)
ggplot(a, aes(x=language_skill,y=value, fill=language_skill)) +
geom_bar(stat="identity", position="dodge", colour="black") +
scale_fill_brewer(type="qual", palette=1)
ggplot(a, aes(x=language_skill,y=value, fill=language_skill)) +
geom_bar(stat="identity", position="dodge", colour="black")
ggplot(a, aes(x=language_skill,y=value, fill=language_skill)) +
geom_bar(stat="identity", position="dodge", colour="black") +
scale_fill_brewer(type="qual", palette=1)
ggplot(a, aes(x=language_skill,y=value)) +
geom_bar(stat="identity", position="dodge", colour="black") +
scale_fill_brewer(type="qual", palette=1)
ggplot(a, aes(x=language_skill,y=value,fill=language_skill)) +
geom_bar(stat="identity", position="dodge", colour="black") +
scale_fill_brewer(type="qual", palette=1)
ggplot(a, aes(x=language_skill,y=value,)) +
geom_bar(stat="identity", position="dodge", colour="black") +
scale_fill_brewer(type="qual", palette=1)
ggplot(a, aes(x=language_skill,y=value,)) +
geom_bar(stat="identity", position="dodge", colour="red") +
scale_fill_brewer(type="qual", palette=1)
ggplot(a, aes(x=language_skill,y=value,)) +
geom_bar(stat="identity", position="dodge", colour="black")
ggplot(m_data, aes(x=writing_foreign)) + theme_bw() + geom_bar()
#MAKE CODE MORE EASY
language_summary <- (colMeans( m_data[ , c("writing_foreign", "speaking_foreign", "listening_foreign", "writing_native", "listening_native","speaking_native")],na.rm = TRUE)) %>% as.matrix()
colnames(language_summary) <- c("rating")
names(tmp) = c("language_skill", "", "value")
tmp<- melt(language_summary)
names(tmp) = c("language_skill", "", "value")
ggplot(a, aes(x=language_skill,y=value)) +
geom_bar(stat="identity", position="dodge", colour="black")
language_summary
print(paste("The subjective anguage Ratings: ", language_summary))
print("The subjective anguage Ratings: ")
print(language_summary)
#here we calculate the mean for the different types of the real task
(s_data2 <- group_by(m_data, type) %>% filter(trial_name=="ratingScaleTask") %>% summarise(type_mean=mean(response)))
#check if the foreign or native language is used in this experiment and add the new column
m_data <- m_data %>%
mutate(language_eq = (exp_language == native_language))
#filter out the trial tasks as they are irrelevant for us
m_data <- m_data %>% filter(trial_name == "ratingScaleTask")
#selecting relevant columns
s_data <- select(data, submission_id, trial_name, id, type, response, RT, language, native_language, foreign_language, foreign_dominance, speaking_native, listening_native, writing_native, speaking_foreign, listening_foreign, writing_foreign, reading_time, listening_time, speaking_time, learning_time,age,education, gender,timeSpent) %>% filter(trial_name == "ratingScaleTask")
#here we change the types of the variables
m_data <- mutate(s_data, trial_name = factor(trial_name), type = factor(type), exp_language= language, foreign_dominance = factor(foreign_dominance), subject_id = as.numeric(submission_id), response = factor(response, ordered=TRUE), experiment_id = NULL, language = NULL, submission_id = NULL, id = factor(id),native_language = factor(native_language), foreign_language=factor(foreign_language) , education = factor(education), gender = factor(gender))
#setwd("~/Mental_Imagery_Experiment")
library(tidyverse)
library(rstan)
# set cores to use to the total number of cores (minimally 4)
options(mc.cores = max(parallel::detectCores(), 4))
# save a compiled version of the Stan model file
rstan_options(auto_write = TRUE)
library(brms)
# install faintr with
#install.packages("HDInterval")
#devtools::install_github('michael-franke/bayes_mixed_regression_tutorial/faintr', build_vignettes = TRUE)
library(faintr)
set.seed(123)
# your code here
#data <- read_csv("C:/Users/leado/XP_Lab/Mental_Imagery_Experiment/data/results_72_Mental_Imagery_Experiment_Sveana+Spellbanovicz.csv")
#data %>% glimpse()
#Sven PC1
#data <- read_csv("C:/Users/Groen/Documents/Mental_Imagery_Experiment/data/results_72_Mental_Imagery_Experiment_Sveana+Spellbanovicz.csv")
# data %>% glimpse()
#Sven PC2
data <- read_csv("C:/Users/SvenG/OneDrive/Sommersemester 2019/Experimental Psychology/Mental_Imagery_Experiment/data/results_72_Mental_Imagery_Experiment_Sveana+Spellbanovicz.csv")
data %>% glimpse()
#selecting relevant columns
s_data <- select(data, submission_id, trial_name, id, type, response, RT, language, native_language, foreign_language, foreign_dominance, speaking_native, listening_native, writing_native, speaking_foreign, listening_foreign, writing_foreign, reading_time, listening_time, speaking_time, learning_time,age,education, gender,timeSpent) %>% filter(trial_name == "ratingScaleTask")
#here we change the types of the variables
m_data <- mutate(s_data, trial_name = factor(trial_name), type = factor(type), exp_language= language, foreign_dominance = factor(foreign_dominance), subject_id = as.numeric(submission_id), response = factor(response, ordered=TRUE), experiment_id = NULL, language = NULL, submission_id = NULL, id = factor(id),native_language = factor(native_language), foreign_language=factor(foreign_language) , education = factor(education), gender = factor(gender))
m_data
#check if the foreign or native language is used in this experiment and add the new column
m_data <- m_data %>%
mutate(language_eq = (exp_language == native_language))
#filter out the trial tasks as they are irrelevant for us
m_data <- m_data %>% filter(trial_name == "ratingScaleTask")
d_individual_summary <- m_data  %>% group_by(subject_id) %>%  summarize(mean_RT = mean(RT), timeSpent=mean(timeSpent), writing_foreign = mean(writing_foreign), speaking_foreign= mean(speaking_foreign), listening_foreign = mean(listening_foreign), writing_native = mean(writing_native), speaking_native = mean(speaking_native),listening_native = mean(listening_native),reading_time = mean(reading_time), listening_time= mean(listening_time), speaking_time = mean(speaking_time), learning_time=mean(learning_time), age = mean(age), education = unique(education),gender = unique(gender), exp_language = unique(exp_language), native_language = unique(native_language), foreign_language= unique(foreign_language))
#gender was presented in German and English
#this translates the german version into english
d_individual_summary$gender <- ifelse(d_individual_summary$gender == "männlich" & d_individual_summary$gender != "male" & d_individual_summary$gender != "female", "male","female")
#same with education:
#TODO
#Barplot
ggplot(m_data, aes(x=age)) + theme_bw() + geom_bar()
age_mean <-(colMeans( m_data[ , c("age")],na.rm = TRUE))
print(paste("The average age of our participants is: ",
(colMeans( m_data[ , c("age")],na.rm = TRUE)), "years"))
#Barplot
ggplot(m_data, aes(x=age,scale_y_continuous(labels = function(x)x/35))) + theme_bw() + geom_bar()
#Barplot
ggplot(m_data, aes(x=age)) + theme_bw() + geom_bar()
#Barplot
ggplot(d_individual_summary, aes(x=age)) + theme_bw() + geom_bar()
age_mean <-(colMeans( d_individual_summary[ , c("age")],na.rm = TRUE))
age_mean <-(colMeans( d_individual_summary[ , c("age")],na.rm = TRUE))
print(paste("The average age of our participants is: ",
(colMeans( m_data[ , c("age")],na.rm = TRUE)), "years"))
age_median <- d_individual_summary$age %>% apply(2, FUN = median)
age_median <- d_individual_summary$age %>% apply(a, FUN = median)
age_median <- d_individual_summary$age %>% apply(1, FUN = median)
d_individual_summary$age
age_median <- c(d_individual_summary$age) %>% apply(1, FUN = median)
c(d_individual_summary$age)
d_individual_summary[ , c("age")
d_individual_summary[ , c("age")]
age_median <- d_individual_summary[ , c("age")] %>% apply(1, FUN = median)
age_median
d_individual_summary[ , c("age")]
age_median <- d_individual_summary[ , c("age")] %>% apply(2, FUN = median)
age_median
age_median <- d_individual_summary[ , c("age")] %>% na.omit() %>% apply(2, FUN = median)
age_median
#Barplot
ggplot(d_individual_summary, aes(x=age)) + theme_bw() + geom_bar()
age_mean <-(colMeans( d_individual_summary[ , c("age")],na.rm = TRUE))
age_median <- d_individual_summary[ , c("age")] %>% na.omit() %>% apply(2, FUN = median)
print(paste("The average age of our participants is: ",
age_mean, "years"))
print(paste("and the media age of our participants is: ",
age_median))
age_mean <- d_individual_summary[ , c("age")] %>% na.omit() %>% apply(2, FUN = mean)
age_median <- d_individual_summary[ , c("age")] %>% na.omit() %>% apply(2, FUN = median)
#Barplot
ggplot(d_individual_summary, aes(x=age)) + theme_bw() + geom_bar()
age_mean <- d_individual_summary[ , c("age")] %>% na.omit() %>% apply(2, FUN = mean)
age_median <- d_individual_summary[ , c("age")] %>% na.omit() %>% apply(2, FUN = median)
print(paste("The average age of our participants is: ",
age_mean, "years"))
print(paste("and the media age of our participants is: ",
age_median))
m_data
ggplot(m_data, aes(x=native_language)) + theme_bw() + geom_bar()
ggplot(m_data, aes(x=foreign_language)) + theme_bw() + geom_bar()
ggplot(d_individual_summary, aes(x=native_language)) + theme_bw() + geom_bar()
ggplot(d_individual_summary, aes(x=foreign_language)) + theme_bw() + geom_bar()
#MAKE CODE MORE EASY
language_summary <- (colMeans( m_data[ , c("writing_foreign", "speaking_foreign", "listening_foreign", "writing_native", "listening_native","speaking_native")],na.rm = TRUE)) %>% as.matrix()
colnames(language_summary) <- c("rating")
library(reshape2)
tmp<- melt(language_summary)
names(tmp) = c("language_skill", "", "value")
ggplot(a, aes(x=language_skill,y=value)) +
geom_bar(stat="identity", position="dodge", colour="black")
print("The subjective anguage Ratings: ")
print(language_summary)
ggplot(a, aes(x=language_skill,y=value)) +
geom_bar(stat="identity", position="dodge", colour="black")  +
theme_bw()
#MAKE CODE MORE EASY
language_summary <- (colMeans( m_data[ , c("writing_foreign", "speaking_foreign", "listening_foreign", "writing_native", "listening_native","speaking_native")],na.rm = TRUE)) %>% as.matrix()
colnames(language_summary) <- c("rating")
library(reshape2)
tmp<- melt(language_summary)
names(tmp) = c("language_skill", "", "rating")
ggplot(a, aes(x=language_skill,y=rating)) +
geom_bar(stat="identity", position="dodge", colour="black")  +
theme_bw()
value
#MAKE CODE MORE EASY
language_summary <- (colMeans( m_data[ , c("writing_foreign", "speaking_foreign", "listening_foreign", "writing_native", "listening_native","speaking_native")],na.rm = TRUE)) %>% as.matrix()
colnames(language_summary)
library(reshape2)
tmp<- melt(language_summary)
names(tmp) = c("language_skill",  "value")
ggplot(a, aes(x=language_skill,y=value)) +
geom_bar(stat="identity", position="dodge", colour="black")  +
theme_bw()
print("The subjective language Ratings: ")
print(language_summary)
#MAKE CODE MORE EASY
language_summary <- (colMeans( m_data[ , c("writing_foreign", "speaking_foreign", "listening_foreign", "writing_native", "listening_native","speaking_native")],na.rm = TRUE)) %>% as.matrix()
colnames(language_summary)
library(reshape2)
tmp<- melt(language_summary)
names(tmp) = c("language_skill",  "rating")
ggplot(a, aes(x=language_skill,y=rating)) +
geom_bar(stat="identity", position="dodge", colour="black")  +
theme_bw()
tmp
names(tmp) = c("language_skill", "", "rating")
tmp
ggplot(a, aes(x=language_skill,y=rating)) +
geom_bar(stat="identity", position="dodge", colour="black")  +
theme_bw()
tmp
ggplot(a, aes(x=language_skill,y=value)) +
geom_bar(stat="identity", position="dodge", colour="black")  +
theme_bw()
#Counting number of overall excluded participants
start_participants = nrow(unique(m_data[,"subject_id"]))
start_participants
start_num_sentences = nrow(m_data)
a = nrow(unique(m_data[,"subject_id"]))
print(paste("Number of Participants before exclusion i: ", a))
#Exclude
new_data <- m_data %>% filter(native_language == "German" | native_language == "English")
b= nrow(unique(new_data[,"subject_id"]))
print(paste("Number of Participants after exclusion i: ", b))
print(paste("Excluded: ", a-b))
a = nrow(unique(new_data[,"subject_id"]))
print(paste("Number of Participants before exclusion ii: ", a))
#Exclude
new_data <- new_data %>% filter(foreign_language == "German" | foreign_language == "English")
b= nrow(unique(new_data[,"subject_id"]))
print(paste("Number of Participants after exclusion ii: ", b))
print(paste("Excluded: ", a-b))
a = nrow(unique(new_data[,"subject_id"]))
print(paste("Number of Participants before exclusion iii: ", a))
#Exclude
new_data <- new_data %>% filter(foreign_dominance == 'no')
b= nrow(unique(new_data[,"subject_id"]))
print(paste("Number of Participants after exclusion iii: ", b))
print(paste("Excluded: ", a-b))
a = nrow(unique(new_data[,"subject_id"]))
print(paste("Number of Participants before exclusion iV: ",nrow(unique(new_data[,"subject_id"]))))
#Exclude
new_data <- new_data %>% filter(native_language != foreign_language)
new_data
a = nrow(unique(new_data[,"subject_id"]))
print(paste("Number of Participants before exclusion iV: ",nrow(unique(new_data[,"subject_id"]))))
#Exclude
new_data <- new_data %>% filter(native_language != foreign_language)
new_data <- new_data %>%  mutate(native_language = as.character(native_language), foreign_language = as.character(foreign_language))
new_data
#Exclude
new_data <- new_data %>% filter(native_language != foreign_language)
a = nrow(unique(new_data[,"subject_id"]))
print(paste("Number of Participants before exclusion iV: ",nrow(unique(new_data[,"subject_id"]))))
new_data <- new_data %>%  mutate(native_language = as.character(native_language), foreign_language = as.character(foreign_language))
#Exclude
new_data <- new_data %>% filter(native_language != foreign_language)
b= nrow(unique(new_data[,"subject_id"]))
print(paste("Number of Participants after exclusion iV: ", b))
print(paste("Excluded: ", a-b))
a = nrow(unique(new_data[,"subject_id"]))
print(paste("Number of Participants before exclusion i: ", a))
# CHECK 95% the same answer
# only check main trials and look at subject id
e_data <- group_by(new_data, subject_id)
e_data <- subset(e_data,select = c(response, subject_id))
# get matrix that shows how often a subject clicked each level of vividness
t1 <- table(e_data)
t1 <- as.data.frame.matrix(t1)
# check if one level was chosen more than 95% (>= 33) and safe index
b <- which(t1 >= 32, arr.ind=T)
# save name of columns that have to be deleted
col_names <-colnames(t1[unique(b[,"col"])])
new_data <- new_data[!(new_data$subject_id %in% col_names),]
b= nrow(unique(new_data[,"subject_id"]))
print(paste("Number of Participants after exclusion i: ", b))
print(paste("Excluded: ", a-b))
a = nrow(unique(new_data[,"subject_id"]))
print(paste("Number of Participants before exclusion ii: ", a))
# only check main trials and look at subject id
e_data2 <- group_by(new_data, subject_id)
e_data2 <- subset(e_data2,select = c(response, subject_id))
# CHECK IF 5 or more times "i dont know the answer" was chosen
t2 <- table(e_data2)
t2 <- as.data.frame.matrix(t2)
# check given row was chosen more 5 times and safe index
row <- 1
c <- which(t2[row,] >= 5, arr.ind=T)
# save name of columns that have to be deleted
col_names2 <- colnames(t2[unique(c[,"col"])])
new_data <- new_data[!(new_data$subject_id %in% col_names2),]
b= nrow(unique(new_data[,"subject_id"]))
print(paste("Number of Participants after exclusion ii: ", b))
print(paste("Excluded: ", a-b))
a = nrow(unique(new_data[,"subject_id"]))
print(paste("Number of Participants before exclusion iii: ", a))
#get sd and mean
std<-apply(new_data[5], 2, sd)
mean <- apply(new_data[5], 2, mean)
lower_bound = mean-3*std
upper_bound = mean+3*std
std_excl <- new_data %>% mutate(RT_exc_critieria =RT <= lower_bound || RT >= upper_bound)%>% group_by(subject_id) %>% subset(select = c(RT_exc_critieria, subject_id))
t3 <- table(std_excl) %>% as.data.frame.matrix()
# only continue if there are at least one exclusions at all (else the table does not have the TRUE row)
if(nrow(t3 == 2)){
d <- which(t3["TRUE",] >= 5, arr.ind=T)
# save name of columns that have to be deleted
col_names3 <- colnames(t3[unique(d[,"col"])])
#exclude
new_data <- new_data[!(new_data$subject_id %in% col_names3),]
}
b= nrow(unique(new_data[,"subject_id"]))
print(paste("Number of Participants after exclusion iii: ", b))
print(paste("Excluded: ", a-b))
a = nrow(new_data)
new_data <- new_data %>% filter(response != 0)
b = a - nrow(new_data)
print(paste("number of excluded sentences: ", b))
# Count how many participants have been excluded:
num_excluded = nrow(unique(m_data[,"subject_id"]))-nrow(unique(new_data[,"subject_id"]))
print(paste("Started with ", start_participants, " participants"))
print(paste("Overall Number of excluded participants: ", num_excluded))
print(paste("Remaining number of Participants: ", start_participants - num_excluded))
exc_sentences = start_num_sentences - nrow(new_data)
print(paste("Started with ", start_num_sentences, " sentences"))
print(paste("Overall number of removed sentences", exc_sentences))
print(paste("Remaining number of sentences", nrow(new_data)))
#brms model creation
fit_sc1 <- brm(
formula = response ~ language_eq + type,
data = m_data,
family = cumulative("logit")
)
marginal_effects(fit_sc1)
fit_sc2 <- brm(
formula = response ~ language_eq + type + (1|subject_id),
data = m_data,
family = cumulative("logit")
)
marginal_effects(fit_sc2)
(loo(fit_sc1,fit_sc2))
post_samples <- posterior_samples(fit_sc2) %>%
as_tibble()
effects <- marginal_effects(fit_sc2)
effects$language_eq
effects$type
ggplot(tmp, aes(x=language_skill,y=value)) +
geom_bar(stat="identity", position="dodge", colour="black")  +
theme_bw()
names(tmp) = c("language_skill", "rating")
ggplot(tmp, aes(x=language_skill,y=value)) +
geom_bar(stat="identity", position="dodge", colour="black")  +
theme_bw()
#MAKE CODE MORE EASY
language_summary <- (colMeans( m_data[ , c("writing_foreign", "speaking_foreign", "listening_foreign", "writing_native", "listening_native","speaking_native")],na.rm = TRUE)) %>% as.matrix()
tmp<- melt(language_summary)
names(tmp) = c("language_skill", "rating")
tmp<- melt(language_summary)
names(tmp) = c("language_skill", "rating")
tmp<- melt(language_summary)
names(tmp) = c("language_skill", "rating")
language_summary <- (colMeans( m_data[ , c("writing_foreign", "speaking_foreign", "listening_foreign", "writing_native", "listening_native","speaking_native")],na.rm = TRUE)) %>% as.matrix()
tmp<- melt(language_summary)
names(tmp) = c("language_skill", "rating")
ggplot(tmp, aes(x=language_skill,y=value)) +
geom_bar(stat="identity", position="dodge", colour="black")  +
theme_bw()
ggplot(tmp, aes(x=language_skill,y=rating)) +
geom_bar(stat="identity", position="dodge", colour="black")  +
theme_bw()
#MAKE CODE MORE EASY
language_summary <- (colMeans( m_data[ , c("writing_foreign", "speaking_foreign", "listening_foreign", "writing_native", "listening_native","speaking_native")],na.rm = TRUE)) %>% as.matrix()
colnames(language_summary) <- c("rating")
library(reshape2)
tmp<- melt(language_summary)
names(tmp) = c("language_skill", "", "value")
ggplot(tmp, aes(x=language_skill,y=value)) +
geom_bar(stat="identity", position="dodge", colour="black")  +
theme_bw()
print("The subjective language Ratings: ")
print(language_summary)
tinytex::install_tinytex()
